(define (var? x) (vector? x))
(define (eqvar? x y) (= (vector-ref x 0) (vector-ref y 0)))
(define (succeed s/c) (list s/c))
(define (fail s/c) (list s/c))
(define (walk v s)
  (let ((a (and (var? v) (assp (lambda (x) (eqvar? v x)) s))))
    (if a (walk (cdr a) s) v)))
(define (occurs? x v s)
  (let ((v (walk v s)))
    (cond
      ((var? v) (eqvar? x v))
      ((pair? v) (or (occurs? x (car v) s) (occurs? x (cdr v) s)))
      (else #f))))
(define (ext-s x v s)
  (if (occurs? x v s) #f (cons (cons x v) s)))
(define (unify u v s)
  (cond
    ((eq? u v) s)
    ((var? u) (if (var? v)
                  (if (eqvar? u v) s (cons (cons u v) s))
                  (ext-s u v s)))
    ((var? v) (ext-s v u s))
    ((and (pair? u) (pair? v))
     (let ((s (unify (car u) (car v) s)))
       (and s (unify (cdr u) (cdr v) s))))
    (else #f)))
(define (== u v)
  (lambda (s/c)
    (let ((s (unify u v (car s/c))))
      (if s (list (cons s (cdr s/c))) '()))))
(define (disj2 g1 g2)
  (lambda (s/c)
    (mix (g1 s/c) (g2 s/c))))
(define (mix $1 $2)
  (cond ((null? $1) $2)
        ((pair? $1) (cons (car $1) (mix (cdr $1) $2)))
        (else (lambda () (mix $2 ($1))))))
(define (conj2 g1 g2)
  (lambda (s/c)
    (mix-map g2 (g1 s/c))))
(define (mix-map g $)
  (cond ((null? $) '())
        ((pair? $) (mix (g (car $)) (mix-map g (cdr $))))
        (else (mix-map g ($)))))
(define-syntax disj
  (syntax-rules ()
    ((_) fail)
    ((_ g) g)
    ((_ g0 g1 ...)
     (disj2 g0 (lambda (s/c) (lambda () ((disj g1 ...) s/c)))))))
(define-syntax conj
  (syntax-rules ()
    ((_) succeed)
    ((_ g) g)
    ((_ g0 g1 ...) (conj2 g0 (conj g1 ...)))))
(define (take n $)
  (cond ((null? $) '())
        ((= n 0) '())
        ((pair? $) (cons (car $) (take (- n 1) (cdr $))))
        (else (take n ($)))))
(define (walk* v s)
  (let ((v (walk v s)))
    (if (pair? v)
        (cons (walk* (car v) s)
              (walk* (cdr v) s))
        v)))
(define-syntax fresh
  (syntax-rules ()
    ((_ () g ...) (conj g ...))
    ((_ (x) g ...) (lambda (s/c)
                     (let ((x (var (cdr s/c))))
                       ((conj g ...) (cons (car s/c) (+ 1 (cdr s/c)))))))
    ((_ (x0 x1 ...) g ...) (fresh (x0) (fresh (x1 ...) g ...)))))
(define-syntax run
  (syntax-rules ()
    ((_ n (x ...) g ...)
     (take n ((fresh (x ...) g ...
                (lambda (s/c) (list (walk* `(,x ...) (car s/c))))) init-state)))))
(define-syntax conde
  (syntax-rules ()
    ((_ (g ...) ...)
     (disj (conj g ...) ...))))
