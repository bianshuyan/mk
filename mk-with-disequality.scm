(define (var) (vector #f))
(define var? vector?)
(define (walk v s)
  (let ((a (and (var? v) (assq v s))))
    (if a (walk (cdr a) s) v)))
(define (occurs? x v s)
  (let ((v (walk v s)))
    (cond ((var? v) (eq? x v))
          ((pair? v) (or (occurs? x (car v) s)
                         (occurs? x (cdr v) s)))
          (else #f))))
(define (ext-s x v s)
  (if (occurs? x v s) #f (cons (cons x v) s)))
(define (unify u v s)
  (let ((u (walk u s)) (v (walk v s)))
    (cond ((eq? u v) s)
          ((var? u) (if (var? v) (cons (cons u v) s) (ext-s u v s)))
          ((var? v) (ext-s v u s))
          ((and (pair? u) (pair? v))
           (let ((s (unify (car u) (car v) s)))
             (and s (unify (cdr u) (cdr v) s))))
          (else #f))))
(define (=/= u v)
  (lambda (a)
    (let ((s0 (car a)))
      (let ((s1 (unify u v s0)))
        (if s1 (if (eq? s0 s1) '()
                   (list (cons s0 (cons (pre s1 s0) (cdr a)))))
            (list a))))))
(define (== u v)
  (lambda (a)
    (let ((s0 (car a)))
      (let ((s1 (unify u v s0)))
        (if s1 (if (eq? s0 s1) (list a)
                   (let ((c* (verify (cdr a) s1 (lambda (x) x))))
                     (if c* (list (cons s1 c*)) '())))
            '())))))
(define (verify c* s k)
  (if (null? c*)
      (k '())
      (let ((c0 (car c*)))
        (let ((c1 (unify (map car c0) (map cdr c0) s)))
          (if c1 (if (eq? c0 c1) #f
                     (verify (cdr c*) s (lambda (x) (k (cons (pre c1 s) x)))))
              (verify (cdr c*) s k))))))
(define (pre x y)
  (if (eq? x y)
      '()
      (cons (car x) (pre (cdr x) y))))
(define (succeed a) (list a))
(define (fail a) '())
(define (disj2 g1 g2)
  (lambda (a)
    (mix (g1 a) (g2 a))))
(define (mix $1 $2)
  (cond ((null? $1) $2)
        ((pair? $1) (cons (car $1) (mix (cdr $1) $2)))
        (else (lambda () (mix $2 ($1))))))
(define (conj2 g1 g2)
  (lambda (a)
    (mix-map g2 (g1 a))))
(define (mix-map g $)
  (cond ((null? $) '())
        ((pair? $) (mix (g (car $)) (mix-map g (cdr $))))
        (else (mix-map g ($)))))
(define-syntax disj
  (syntax-rules ()
    ((_) fail)
    ((_ g) g)
    ((_ g0 g1 ...)
     (disj2 g0 (lambda (a) (lambda () ((disj g1 ...) a)))))))
(define-syntax conj
  (syntax-rules ()
    ((_) succeed)
    ((_ g) g)
    ((_ g0 g1 ...) (conj2 g0 (conj g1 ...)))))
(define-syntax fresh
  (syntax-rules ()
    ((_ (x ...) g ...)
     (let ((x (var)) ...) (conj g ...)))))
(define-syntax conde
  (syntax-rules ()
    ((_ (g ...) ...)
     (disj (conj g ...) ...))))
(define-syntax run
  (syntax-rules ()
    ((_ n (x ...) g ...)
     (let ((x (var)) ...)
       (map (reify `(,x ...)) (take n ((conj g ...) '(()))))))))
(define (take-all $)
  (cond ((null? $) '())
        ((pair? $) (cons (car $) (take-all (cdr $))))
        (else (take-all ($)))))
(define-syntax run*
  (syntax-rules ()
    ((_ (x ...) g ...)
     (let ((x (var)) ...)
       (map (reify `(,x ...)) (take-all ((conj g ...) '(()))))))))
(define (take n $)
  (cond ((null? $) '())
        ((= n 0) '())
        ((pair? $) (cons (car $) (take (- n 1) (cdr $))))
        (else (take n ($)))))
(define (walk* v s)
  (let ((v (walk v s)))
    (if (pair? v)
        (cons (walk* (car v) s)
              (walk* (cdr v) s))
        v)))
(define (reify-name n)
  (string->symbol
   (string-append "_" (number->string n))))
(define (reify-s v r)
  (let ((v (walk v r)))
    (cond ((var? v)
           (let ((rn (reify-name (length r))))
             (cons (cons v rn) r)))
          ((pair? v)
           (reify-s (cdr v)
                    (reify-s (car v) r)))
          (else r))))
(define (purify c* r)
  (cond ((null? c*) '())
        ((anyvar? (car c*) r) (purify (cdr c*) r))
        (else (cons (car c*) (purify (cdr c*) r)))))
(define (anyvar? c r)
  (cond ((var? c) (var? (walk c r)))
        ((pair? c) (or (anyvar? (car c) r) (anyvar? (cdr c) r)))
        (else #f)))
(define (reify v)
  (lambda (s/c*)
    (let ((v (walk* v (car s/c*)))
          (c* (walk* (cdr s/c*) (car s/c*))))
      (let ((r (reify-s v '())))
        (let ((v (walk* v r))
              (c* (walk* (simplify-c* (purify c* r) '()) r)))
          (if (null? c*)
              v
              (list v c*)))))))
(define (subsumed? c c*)
  (if (null? c*)
      #f
      (if (eq? (unify (map car c) (map cdr c) (car c*)) (car c*))
          #t
          (subsumed? c (cdr c*)))))
(define (simplify-c* c* nc*)
  (cond ((null? c*) nc*)
        ((or (subsumed? (car c*) (cdr c*)) (subsumed? (car c*) nc*))
         (simplify-c* (cdr c*) nc*))
        (else (simplify-c* (cdr c*) (cons (car c*) nc*)))))
